
float4x4 WorldMatrix : World;
float4x4 ViewMatrix : View;
float4x4 ProjectionMatrix : Projection;

float3 LightPositon;
float3 LightColor;

float3 AmbientLight = float3(0.2, 0.2, 0.2);


int Shadow; // if 1, draw planar shadow

sampler2D DiffuseMap = sampler_state {
	MinFilter = Linear;
	MagFilter = Linear;
	WrapS = Wrap;
	WrapT = Wrap;
};

struct VertexShaderInput 
{
	float4 Pos    : POSITION;
	float3 Normal : NORMAL;
	float2 Tex    : TEXCOORD0;
};

struct VertexShaderOutput
{
    float4 Pos : POSITION;
	float2 Tex : TEXCOORD0;
	float3 Normal : TEXCOORD1;
	float3 WorldPos : TEXCOORD2;
};


VertexShaderOutput VertexShaderFunction(VertexShaderInput input)
{
    VertexShaderOutput output;

	output.Pos = mul( WorldMatrix, input.Pos );
    output.Pos = mul( ViewMatrix, output.Pos );
    output.Pos = mul( ProjectionMatrix, output.Pos );

	output.Tex = input.Tex;

	output.WorldPos = mul(WorldMatrix, input.Pos);
	output.Normal = mul((float3x3)WorldMatrix, input.Normal);

    return output;
}

float4 PixelShaderFunction(VertexShaderOutput input) : COLOR
{
	float4 renderColor = float4(0, 0, 0, 1);

	if(!Shadow)
	{
		float3 lightVec = normalize(input.WorldPos - LightPositon);
		float diffuseFactor = saturate( dot(-lightVec, input.Normal) );
		float3 diffuseMaterial = tex2D(DiffuseMap, input.Tex);
		float3 diffuseColor = diffuseFactor * LightColor * diffuseMaterial;
		float3 ambientColor = AmbientLight * diffuseMaterial;
		renderColor = float4(diffuseColor + ambientColor, 1);
	}
	
	return renderColor;
}

technique TextureLightingTech
{
    pass
    {
		CullFaceEnable = true;
		CullFace = Back;
		//PolygonMode =  int2(Front, Line);
        VertexProgram   = compile gp4vp VertexShaderFunction();
        FragmentProgram = compile gp4fp PixelShaderFunction();
    }
}


